---
layout: post
title:  "微服务之我思"
date:   2017-04-25 13:00:00 +0800
categories: microservice 

---

## TOC

1. 微服务的动机
2. 模块的独立部署
3. 优胜劣汰
4. 人, 人, 人
5. 总结

### TL;DR
1. 公司组织采用微服务的原因是为了`更快地交付高质量的产品`。 微服务具有强边界的特征， 有利于`职责`明确， 利于大型分布式团队进行分工， 提高效率。 
2. 我认为， 局部(模块)和整体(产品)需要一个一个协调平衡。 区分ProductOwner & ServiceOwner, 把独立模块部署弱化为独立模块发布。 采用服务的多版本， 产品的多模块整体变更来体现产品稳定性和可测性的诉求。 
3. 独立部署是强边界生成的充分而非必要条件。 畅想了一下给服务划分等级进行激励的方式来促进强边界的产生. 
4. 康威法则是一个很重要的论断， 结合Spotify 畅想了微服务和组织架构的关系。 讨论`业务和技术`诉求在组织架构中的体现。 组织架构的通讯联系， 底层的`平台支持`应该承担工具分享和跨产品线技术资源共享的责任。 




## 1. 微服务的动机

`更快地交付高质量产品`， 我认为这是大家采纳微服务的原因。
	
什么是快? 有一种`短期的快`叫"Dirty and work". 另一种`长期的快` "Well-design". 在实际生活中， 前者是普遍现象。 后者理论上更有市场。 


### 松耦合

为什么说微服务可以更快地交付高质量的产品? 

因为良好的模块划分， 可以减少模块间的协作。 模块间的协作往往意味着， 不同人和团队间的协作。 
避免不必要的协作，
增加短途的信息沟通， 避免长途的信息沟通。 可以解除耦合，提高效率
按照康威法则， 系统架构最终会反应沟通的架构。 而微服务系统拥抱进化， 更容易动态适应康威法则。 

同时微服务强调接口约定， 这**促进**模块的边界的形成。


### 高内聚

微服务通过， 给服务模块赋权， 使其自治。 
自治意味着内聚。 这是软件设计的一个重要的优秀性质。 

模块的Owner被赋予了自主的权利， 容易培养一种`主人翁意识`。 
这就和`包产到户`时一个道理。 通过赋权来提高生产力。

### 分工 & 并行调用?

1. 实践微服务的一个重要特质是微服务模块正好对应了分工的策略。 提高并行度。 
   尤其适用于分布式的人员数量多的团队。 
	相比于单体模块， 提高人力投入对应的`效率提升`更有效。
2. 
旧的摩尔定律失效， 新的摩尔定律变成了，每18个月CPU的核数就会提高一倍。 计算领域需要考虑利用多CPU的优势。 
有一点观察， 人比机器贵， 机器的核会越来越多。  我们在做软件开发的时候应该充分利用这一点。 
微服务之间的调用， 可以采用异步的调用。 把串行调用改为并行调用可以减少接口总体响应时间。`提高效率` (注意到， 异步调用会引入而外的复杂度)


###  总结

相比于单体，微服务架构提供了更好的条件. (单体也可以通过目录模块的划分， 开发者良好的素质来做到一样的事情)。

1. 允许"Dirty and work" & "well-design" 并存。 但是有所区分。某种程度上, 避免一粒老鼠屎坏了一锅粥. 
2. 模块强边界， 促进限定上下文形成。 
3. 给予模块Owner 主人翁意识。 
4. 分工的效率 和 程序运行的效率 上具有优势

总而言之， 乍看起来， 微服务可以`更快地交付高质量产品`。 
而这意味着业务技术团队的`竞争优势`。

## 2 模块的独立部署性

微服务要求接口保证兼容性。 
以兼容性为基础。 使得模块单一版本存在。 有了唯一性。 简化了问题。 
模块具有可独立部署性。 


但是模块单一版本， 会引入一些问题. 
下面会从`职责`角度来阐述我的观点。 

###  现状

大多数的文献和实践都是把模块的独立部署性当作非常重要的点

《微服务设计》明确反对了， 服务批量部署。 因为他认为这会导致的服务的耦合。 

```
把多个服务一起进行部署经常会导致服务的耦合。 不用很长时间， 本来分离得很好的服务酒会和其他服务纠缠得越来越紧密， 而你可能从未注意到，
因为从未试图单独部署他们， 最终， 系统杂乱无序。
```

所以在实践的时候， 大家会实现自动化部署方案， 自动化部署一个服务. 
服务接口是兼容的， 使用Rolling update 来对单个模块进行部署。 
当服务之间存在调用依赖的时候， 自底向上进行部署。 


赋予Service 独立部署的特性会导致不同的Product 之间的耦合。 以产品的回滚为例， 
	ProductA 和ProductB 都依赖于 ServiceX, ServiceX 某次升级包含了ProductA 和 ProductB 的新增功能。 ProductA 不能独立决定能否回滚. 需要ServiceX 的同学进行确认能否回滚。 而ServiceX 需要考虑ProductB 能否回滚。 如此就涉及了不同的ProductOwner 之间的耦合。 如果涉及了更多的产品就更加有问题了， 甚至服务也可能依赖服务。 


可以看到， **我们赋予了Service 独立部署的权利** 但是他并不能很好地支持产品级别SLA(快速恢复)。 还有端到端的线上验收也有比较多的困难。


###  优化?
![ProductOwner VS ServiceOwner](/image/thoughts/PO_SO.png)

ProductOwner: 产品经理, 测试, Dev 
-  职 :  快速发布产品
-  责: 产品级别SLA(KPI?)
	*  稳定性, 由产品线总体的模块稳定性组成
	*  快速恢复???!!!
	*  可测性

ServiceOwner: Dev
-  职:  高内聚, 低耦合, 减少技术债
-  责:  模块级 SLA
	* 稳定性

	
这引出了一个矩阵ProductOwner vs ServiceOwner

1. 垂直维度是ProductOwner， 写产品时， 应该"Dirty & work"
2. 水平维度是模块Owner， 模块的Owner 负责包产到户， 保护好自己的模块边界， 争取其通用性， 整洁性， 影响力。 
3. 矩阵里面的是模块
4. 两个维度共同作用， 保证作为整体的质量， 同时保证模块的技术性。 
	


我认为应该通过服务的多版本来解耦两者的关联关系。 改变ServiceOwner 和ProductOwner 的强关联。 从而解除耦合。 
ServiceOwner 负责发布产物及镜像。 但他**不** 负责进行部署到生产环境。 
ProductOnwer 负责选择合适的发布镜像进行生产环境部署。  测试和产品经理可以在这一过程中进行端到端的集成测试和UAT, 来保证产品的稳定性。 
在出现回滚情形的时候， 由于Product 之间的解耦， Product 和 Service 之间的解耦合。 **这一组ProductOwner** 自己就能够进行

引入的新问题: 

ServiceOwner 发布多版本的服务， 相比于发布单版本， 在管理上增加了不少难度。 可以通过维护**较少的几个线性** 版本来减少多版本引入的复杂度. 

### 总结

考虑权责一致性的情况， 我建议划分ProductOwner & ServiceOwner， 解耦两者。 降低ServiceOwner 的权利 (i.e 独立部署部署变更=> 独立发布变更)
把他负责不了的责任-`产品SLA` 交给 ProductOwner, 相应地赋予 ProductOwner 部署验收的权利。 让ProductOnwer 负责`产品SLA`


至于前面提到的担忧, 多模块发布会导致模块边界地消失。  再来看ProductOnwer & ServiceOwner 这个矩阵
ProductOwner 靠近业务, 他负责快速发布， 引导产品方向
ServiceOwner 靠近技术， 他负责模块的高内聚， 低耦合， 减少技术债
两者处于一个健康的制衡关系, 本来业务开发就应该是`dirty and work`, 影响一些模块边界是正常的情况。 
我认同把部署的权利从ServiceOwner 拿走， 会对造成一些模块边界影响。 不过我认为可以引入适当地对服务模块的评级， 把模块化， 抽象能力作为一项技术产出来评比， 可以补充增强模块边界的划分。  

可以说， 把ServiceOwner独立部署权降级为独立发布权， 是一种技术性的弱化。 业务性的增加。 考虑了更多ProductOwner 层面的业务性的考虑。 

## 3. 优胜劣汰?
	
接下来讨论一下， 如何给模块添加点活力。 

###  现象

在服务化进程中， 服务可能会遇到这样几个情形

1. 僵尸模块, 好几个月不再有更新, 都不清楚谁是ServiceOwner
2. 缺乏抽象度	
	- 大量具体逻辑入侵.  if product == A then "say hi" elsif product == B then "say shit"
	- 迫于业务压力， 停止进一步重构优化。 Account-Service 服务只支持 ProductA, 不支持ProductB. 当然这有很多考虑。 比如历史现状， 投入产出等等。 这边从纯技术的角度， 我认为应该是至少向着一统这个目标进行重构的。 
3. 服务模块没有主人翁意识， 经历代码质量的衰退。 



###  服务分级

服务分成三个级别

1. 产品级服务,  拆分服务的早期， 服务不稳定， 服务有可能随时被重写， 合并， 替换。 尽量明确的接口定义
2. 产品线级别服务， 服务相对稳定， 服务边界逐渐清晰，有很强内聚性, 服务相对稳定。 有相对明确的Owner.  相对严格的接口定义
3.  公司级别服务,   由于其内在通用性, 比如，账号，权限， 计费， 报表， 监控。 产品线级别服务长时间的沉淀。 这时候服务已经很少进行变更， 高内聚， 低耦合。  提供稳定的可靠的公司级服务。 有固定的若干的Owner 进行维护。 严格的接口定义。应该交给专门OP进行运维支持? 


###  服务角色 & 竞争

相同类型的服务模块可以存在多个, 比如, A 的账号权限因为和 B 的账号权限很不同。 整合风险和成本大。 那么是不是可以弄一个 B-account. 
而不是让Accout 和 ProductB 通过数据库表来共享数据， 耦合在一起。
小了说， 这是一个产品级的账号服务， 解决了Union 的问题。 
进一步说， A-account & B-account 作为两个产品级的服务, 两者竞争账号需求。 随着需求演进， 或者技术驱动。 是更容易融合的。 A-account & B-account 拆分服务时整理的需求， 是作为通用账号服务 x-account 的前提。 所以从这个角度看是值得的。 


### 总结

设置合理的技术激励是一个比较复杂的问题。 

畅想了一下，开了些脑洞。通过给服务分级， 给服务的Owner 设置目标。 引入同类型服务的竞争。 来提高微服务中， 技术性的一面。 对于一些模块， 业务性极强， 通用性极差的情况， 那么通过这种机制也有利于区分出通用模块和边缘模块。 让通用模块更通用。 让边缘模块更边缘。 随时准备好被重写合并， 替换。 这种模块的边界清不清楚应该也不是那么重要。 

## 4. 人, 人, 人

人很重要, 组织和团队结构尽量和架构保持一致。 
康威法则强调了，试图让系统设计和组织结构不匹配会导致的风险。 
这引导我们将服务所有权同团队相必配。 当两者不一致时， `长途的沟通增多`。 效率降低。 会遇到很多摩擦。

接下来线看一下业务和技术碰撞中的架构， 再看一下 Spotify 的成功案例。 

在围绕人做架构设计时， 以赋权自治为主， 以工具平台支持为辅。 

###  业务 vs 技术

professor & entrepreneur.来一个矩阵 

1. 垂直维度产品的交付， 写产品时， 就应该"Dirty & work"， 着重短期速度
2. 水平维度是技术, 做技术时， 应该"锱铢必较， 不轻易妥协"， 保证质量和长期速度
3. 矩阵里的是一个个研发人员
4. 两个维度保持适当的紧张， 达到 `更快地交付高质量的产品` 的共同目的


###  组织结构(Spotify)
![Spotify组织架构](/image/thoughts/spotify.png)

1. 参考[Spotify](https://ucvox.files.wordpress.com/2012/11/113617905-scaling-agile-spotify-11.pdf)的经验
	1. 一个公司非为若干个产品线(Tribe). 一个产品线内有若干个Squad(团队)。 再同一个Tribe 里面相同的职责的人称为Chapter.
	2. Squad(业务): 团队划分的基本单元， 包含了完成发布产品的所有能力。 具有相当的自治度
	3. Chapter(技术): 相同的职责和工种的人， 互相交流技术， 共享知识 
	4. 不同Tribe 力的相同兴趣的人聚为Guild.

2. 在一个Tribe(产品线)级别里需要有比较一致的技术愿景， 技术栈， 框架和语言。 
		每条业务线团队， 负责自己创建的服务的整个生命周期， 包括构建， 测试， 发布和运维。 
3. 一个核心平台交付团队， 产品线提供建议， 和工具来帮助他们完成工作。 

###  系统架构
架构需要支持产品线内良好的自治。 

1. 一个业务线内， 服务间可以不受任何限制地进行通讯。 
2. 业务线之间， 需要进行适当的控制， 比如通讯需要异步批处理。 **不可以用细粒度的通信** 

### 平台(TODO)

平台应该提供工具支持， 用来解决微服务引入后的

1. 分布式日志追踪根因
2. 实时系统健康指标跟踪
3. 变更运维

同时平台支持跨不同产品线的公共关注点， 会接触和了解到不同的技术方案。 
应该承担和促进跨产品线之间的技术共享， 互通有无。 



###  总结
![Architect](/image/thoughts/architect.png)

为了发挥微服务的威力。 
应该围绕微服务自治为核心， 以平台支持为基础。建立兼顾业务考虑和技术考虑的团队通信结构。 



## 5. 总结

软件开发还不能像土木工程那样， 有那样的精确性。 微服务理念处于一个热潮中。 但是否这就是未来的软件架构， 还有待时间的考证。 
就目前来看，总体上 `微服务强边界的特性`, 利于职责的明确, 利于分工， 从而达到`更快得交付高质量的产品`的目标。 
1. 本文就, 模块独立部署性这一点切入 突出区分了ProductOwner & ServiceOwner 两种角色， 来均衡局部(模块)和整体(产品)的诉求， 关注了产品的稳定性和可测性的诉求。 指出ServiceOwner 拿到部署的职责， 但是并不能保证产品整体的可测试性和稳定性。 
2. 就弱化模块独立性引入地可能弱化强边界这一情况，进行了分析， 畅想了一种给服务设置优胜劣汰的机制来强化服务的强边界生成。 
3. 从人和组织架构的更高高度来看系统架构， 从全貌来探讨了公司级别的一个微服务蓝图。 

以上， 是在有限的实践中， 我对微服务， 特别是变更相关的一些理解和见解。 真是一个迷人的领域, 共勉! 








